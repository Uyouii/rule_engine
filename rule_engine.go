// Code generated by goyacc -o rule_engine.go -p ruleEngine rule_engine.y. DO NOT EDIT.

//line rule_engine.y:2

package rule_engine

import __yyfmt__ "fmt"

//line rule_engine.y:3

//line rule_engine.y:9
type ruleEngineSymType struct {
	yys  int
	node *TokenNode
}

const INTEGER = 57346
const FLOAT = 57347
const STRING = 57348
const IDLEFT = 57349
const IDRIGHT = 57350
const IDENTIFIER = 57351
const BOOL = 57352
const TRUE = 57353
const FALSE = 57354
const AND = 57355
const OR = 57356
const NOT = 57357
const LE = 57358
const GE = 57359
const EQ = 57360
const NE = 57361
const ERROR = 57362
const END = 57363
const IF = 57364
const ELSE = 57365

var ruleEngineToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"INTEGER",
	"FLOAT",
	"STRING",
	"IDLEFT",
	"IDRIGHT",
	"IDENTIFIER",
	"BOOL",
	"TRUE",
	"FALSE",
	"AND",
	"OR",
	"NOT",
	"LE",
	"GE",
	"EQ",
	"NE",
	"ERROR",
	"END",
	"IF",
	"ELSE",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'('",
	"')'",
	"','",
	"'.'",
}

var ruleEngineStatenames = [...]string{}

const ruleEngineEofCode = 1
const ruleEngineErrCode = 2
const ruleEngineInitialStackSize = 16

//line rule_engine.y:326
/*  start  of  programs  */
//line yacctab:1
var ruleEngineExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const ruleEnginePrivate = 57344

const ruleEngineLast = 109

var ruleEngineAct = [...]int8{
	3, 6, 11, 63, 17, 18, 20, 24, 42, 16,
	19, 10, 67, 68, 66, 14, 37, 38, 39, 5,
	21, 29, 30, 43, 64, 28, 25, 13, 26, 47,
	48, 22, 61, 17, 18, 20, 24, 15, 16, 19,
	57, 58, 59, 62, 14, 8, 46, 55, 56, 21,
	65, 40, 41, 33, 34, 27, 13, 45, 1, 60,
	22, 32, 31, 35, 36, 70, 2, 9, 71, 72,
	69, 4, 7, 12, 44, 49, 50, 51, 52, 53,
	54, 17, 18, 20, 24, 23, 0, 19, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 21, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 22,
}

var ruleEnginePact = [...]int16{
	29, -1000, -1000, 5, 14, 42, -1000, 3, -1000, 37,
	-12, -1000, -1000, 77, 77, -1000, -23, -1000, -1000, -1000,
	-1000, -1000, 29, -1000, 48, -1000, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	-1000, -1000, 0, -29, 16, -1000, 42, -1000, -9, -1000,
	-1000, -1000, -1000, -1000, -1000, -12, -12, -1000, -1000, -1000,
	-20, -1000, -1000, -1000, -1000, 61, 29, -1000, 29, -1000,
	-1000, -1000, -1000,
}

var ruleEnginePgo = [...]int8{
	0, 85, 74, 37, 2, 73, 45, 72, 71, 19,
	0, 67, 11, 66, 59, 1, 58,
}

var ruleEngineR1 = [...]int8{
	0, 16, 13, 10, 8, 8, 9, 9, 15, 15,
	7, 7, 7, 6, 6, 6, 6, 6, 11, 11,
	11, 12, 12, 12, 12, 4, 4, 4, 5, 5,
	5, 14, 14, 3, 3, 3, 3, 3, 3, 3,
	1, 2, 2, 2,
}

var ruleEngineR2 = [...]int8{
	0, 1, 2, 1, 1, 3, 1, 3, 1, 5,
	1, 3, 3, 1, 3, 3, 3, 3, 1, 3,
	3, 1, 3, 3, 3, 1, 2, 2, 1, 4,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 3, 3,
}

var ruleEngineChk = [...]int16{
	-1000, -16, -13, -10, -8, -9, -15, -7, -6, -11,
	-12, -4, -5, 27, 15, -3, 9, 4, 5, 10,
	6, 20, 31, -1, 7, 21, 14, 13, 22, 18,
	19, 25, 24, 16, 17, 26, 27, 28, 29, 30,
	-3, -3, 31, -10, -2, 9, -9, -15, -15, -6,
	-6, -6, -6, -6, -6, -12, -12, -4, -4, -4,
	-14, 32, -10, 32, 8, 34, 23, 32, 33, 9,
	4, -15, -10,
}

var ruleEngineDef = [...]int8{
	0, -2, 1, 0, 3, 4, 6, 8, 10, 13,
	18, 21, 25, 0, 0, 28, 0, 33, 34, 35,
	36, 37, 0, 39, 0, 2, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	26, 27, 0, 0, 0, 41, 5, 7, 0, 11,
	12, 14, 15, 16, 17, 19, 20, 22, 23, 24,
	0, 30, 31, 38, 40, 0, 0, 29, 0, 42,
	43, 9, 32,
}

var ruleEngineTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 30, 3, 3,
	31, 32, 28, 26, 33, 27, 34, 29, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	25, 3, 24,
}

var ruleEngineTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23,
}

var ruleEngineTok3 = [...]int8{
	0,
}

var ruleEngineErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	ruleEngineDebug        = 0
	ruleEngineErrorVerbose = false
)

type ruleEngineLexer interface {
	Lex(lval *ruleEngineSymType) int
	Error(s string)
}

type ruleEngineParser interface {
	Parse(ruleEngineLexer) int
	Lookahead() int
}

type ruleEngineParserImpl struct {
	lval  ruleEngineSymType
	stack [ruleEngineInitialStackSize]ruleEngineSymType
	char  int
}

func (p *ruleEngineParserImpl) Lookahead() int {
	return p.char
}

func ruleEngineNewParser() ruleEngineParser {
	return &ruleEngineParserImpl{}
}

const ruleEngineFlag = -1000

func ruleEngineTokname(c int) string {
	if c >= 1 && c-1 < len(ruleEngineToknames) {
		if ruleEngineToknames[c-1] != "" {
			return ruleEngineToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func ruleEngineStatname(s int) string {
	if s >= 0 && s < len(ruleEngineStatenames) {
		if ruleEngineStatenames[s] != "" {
			return ruleEngineStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func ruleEngineErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !ruleEngineErrorVerbose {
		return "syntax error"
	}

	for _, e := range ruleEngineErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + ruleEngineTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(ruleEnginePact[state])
	for tok := TOKSTART; tok-1 < len(ruleEngineToknames); tok++ {
		if n := base + tok; n >= 0 && n < ruleEngineLast && int(ruleEngineChk[int(ruleEngineAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if ruleEngineDef[state] == -2 {
		i := 0
		for ruleEngineExca[i] != -1 || int(ruleEngineExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; ruleEngineExca[i] >= 0; i += 2 {
			tok := int(ruleEngineExca[i])
			if tok < TOKSTART || ruleEngineExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if ruleEngineExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += ruleEngineTokname(tok)
	}
	return res
}

func ruleEnginelex1(lex ruleEngineLexer, lval *ruleEngineSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(ruleEngineTok1[0])
		goto out
	}
	if char < len(ruleEngineTok1) {
		token = int(ruleEngineTok1[char])
		goto out
	}
	if char >= ruleEnginePrivate {
		if char < ruleEnginePrivate+len(ruleEngineTok2) {
			token = int(ruleEngineTok2[char-ruleEnginePrivate])
			goto out
		}
	}
	for i := 0; i < len(ruleEngineTok3); i += 2 {
		token = int(ruleEngineTok3[i+0])
		if token == char {
			token = int(ruleEngineTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(ruleEngineTok2[1]) /* unknown char */
	}
	if ruleEngineDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", ruleEngineTokname(token), uint(char))
	}
	return char, token
}

func ruleEngineParse(ruleEnginelex ruleEngineLexer) int {
	return ruleEngineNewParser().Parse(ruleEnginelex)
}

func (ruleEnginercvr *ruleEngineParserImpl) Parse(ruleEnginelex ruleEngineLexer) int {
	var ruleEnginen int
	var ruleEngineVAL ruleEngineSymType
	var ruleEngineDollar []ruleEngineSymType
	_ = ruleEngineDollar // silence set and not used
	ruleEngineS := ruleEnginercvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	ruleEnginestate := 0
	ruleEnginercvr.char = -1
	ruleEnginetoken := -1 // ruleEnginercvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		ruleEnginestate = -1
		ruleEnginercvr.char = -1
		ruleEnginetoken = -1
	}()
	ruleEnginep := -1
	goto ruleEnginestack

ret0:
	return 0

ret1:
	return 1

ruleEnginestack:
	/* put a state and value onto the stack */
	if ruleEngineDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", ruleEngineTokname(ruleEnginetoken), ruleEngineStatname(ruleEnginestate))
	}

	ruleEnginep++
	if ruleEnginep >= len(ruleEngineS) {
		nyys := make([]ruleEngineSymType, len(ruleEngineS)*2)
		copy(nyys, ruleEngineS)
		ruleEngineS = nyys
	}
	ruleEngineS[ruleEnginep] = ruleEngineVAL
	ruleEngineS[ruleEnginep].yys = ruleEnginestate

ruleEnginenewstate:
	ruleEnginen = int(ruleEnginePact[ruleEnginestate])
	if ruleEnginen <= ruleEngineFlag {
		goto ruleEnginedefault /* simple state */
	}
	if ruleEnginercvr.char < 0 {
		ruleEnginercvr.char, ruleEnginetoken = ruleEnginelex1(ruleEnginelex, &ruleEnginercvr.lval)
	}
	ruleEnginen += ruleEnginetoken
	if ruleEnginen < 0 || ruleEnginen >= ruleEngineLast {
		goto ruleEnginedefault
	}
	ruleEnginen = int(ruleEngineAct[ruleEnginen])
	if int(ruleEngineChk[ruleEnginen]) == ruleEnginetoken { /* valid shift */
		ruleEnginercvr.char = -1
		ruleEnginetoken = -1
		ruleEngineVAL = ruleEnginercvr.lval
		ruleEnginestate = ruleEnginen
		if Errflag > 0 {
			Errflag--
		}
		goto ruleEnginestack
	}

ruleEnginedefault:
	/* default state action */
	ruleEnginen = int(ruleEngineDef[ruleEnginestate])
	if ruleEnginen == -2 {
		if ruleEnginercvr.char < 0 {
			ruleEnginercvr.char, ruleEnginetoken = ruleEnginelex1(ruleEnginelex, &ruleEnginercvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if ruleEngineExca[xi+0] == -1 && int(ruleEngineExca[xi+1]) == ruleEnginestate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			ruleEnginen = int(ruleEngineExca[xi+0])
			if ruleEnginen < 0 || ruleEnginen == ruleEnginetoken {
				break
			}
		}
		ruleEnginen = int(ruleEngineExca[xi+1])
		if ruleEnginen < 0 {
			goto ret0
		}
	}
	if ruleEnginen == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			ruleEnginelex.Error(ruleEngineErrorMessage(ruleEnginestate, ruleEnginetoken))
			Nerrs++
			if ruleEngineDebug >= 1 {
				__yyfmt__.Printf("%s", ruleEngineStatname(ruleEnginestate))
				__yyfmt__.Printf(" saw %s\n", ruleEngineTokname(ruleEnginetoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for ruleEnginep >= 0 {
				ruleEnginen = int(ruleEnginePact[ruleEngineS[ruleEnginep].yys]) + ruleEngineErrCode
				if ruleEnginen >= 0 && ruleEnginen < ruleEngineLast {
					ruleEnginestate = int(ruleEngineAct[ruleEnginen]) /* simulate a shift of "error" */
					if int(ruleEngineChk[ruleEnginestate]) == ruleEngineErrCode {
						goto ruleEnginestack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if ruleEngineDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", ruleEngineS[ruleEnginep].yys)
				}
				ruleEnginep--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if ruleEngineDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", ruleEngineTokname(ruleEnginetoken))
			}
			if ruleEnginetoken == ruleEngineEofCode {
				goto ret1
			}
			ruleEnginercvr.char = -1
			ruleEnginetoken = -1
			goto ruleEnginenewstate /* try again in the same state */
		}
	}

	/* reduction by production ruleEnginen */
	if ruleEngineDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", ruleEnginen, ruleEngineStatname(ruleEnginestate))
	}

	ruleEnginent := ruleEnginen
	ruleEnginept := ruleEnginep
	_ = ruleEnginept // guard against "declared and not used"

	ruleEnginep -= int(ruleEngineR2[ruleEnginen])
	// ruleEnginep is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if ruleEnginep+1 >= len(ruleEngineS) {
		nyys := make([]ruleEngineSymType, len(ruleEngineS)*2)
		copy(nyys, ruleEngineS)
		ruleEngineS = nyys
	}
	ruleEngineVAL = ruleEngineS[ruleEnginep+1]

	/* consult goto table to find next state */
	ruleEnginen = int(ruleEngineR1[ruleEnginen])
	ruleEngineg := int(ruleEnginePgo[ruleEnginen])
	ruleEnginej := ruleEngineg + ruleEngineS[ruleEnginep].yys + 1

	if ruleEnginej >= ruleEngineLast {
		ruleEnginestate = int(ruleEngineAct[ruleEngineg])
	} else {
		ruleEnginestate = int(ruleEngineAct[ruleEnginej])
		if int(ruleEngineChk[ruleEnginestate]) != -ruleEnginen {
			ruleEnginestate = int(ruleEngineAct[ruleEngineg])
		}
	}
	// dummy call; replaced with literal code
	switch ruleEnginent {

	case 1:
		ruleEngineDollar = ruleEngineS[ruleEnginept-1 : ruleEnginept+1]
//line rule_engine.y:40
		{
			lex := ruleEnginelex.(*RuleEngineLex)
			lex.resNode = ruleEngineDollar[1].node
			return 0
		}
	case 2:
		ruleEngineDollar = ruleEngineS[ruleEnginept-2 : ruleEnginept+1]
//line rule_engine.y:47
		{
			ruleEngineVAL.node = ruleEngineDollar[1].node
		}
	case 3:
		ruleEngineDollar = ruleEngineS[ruleEnginept-1 : ruleEnginept+1]
//line rule_engine.y:52
		{
			ruleEngineVAL.node = ruleEngineDollar[1].node
		}
	case 4:
		ruleEngineDollar = ruleEngineS[ruleEnginept-1 : ruleEnginept+1]
//line rule_engine.y:57
		{
			ruleEngineVAL.node = ruleEngineDollar[1].node
		}
	case 5:
		ruleEngineDollar = ruleEngineS[ruleEnginept-3 : ruleEnginept+1]
//line rule_engine.y:60
		{
			lex := ruleEnginelex.(*RuleEngineLex)
			node, err := lex.oper.tokenNodeOr(ruleEngineDollar[1].node, ruleEngineDollar[3].node)
			if err != nil {
				return lex.setErr(err)
			}
			ruleEngineVAL.node = node
		}
	case 6:
		ruleEngineDollar = ruleEngineS[ruleEnginept-1 : ruleEnginept+1]
//line rule_engine.y:70
		{
			ruleEngineVAL.node = ruleEngineDollar[1].node
		}
	case 7:
		ruleEngineDollar = ruleEngineS[ruleEnginept-3 : ruleEnginept+1]
//line rule_engine.y:73
		{
			lex := ruleEnginelex.(*RuleEngineLex)
			node, err := lex.oper.tokenNodeAnd(ruleEngineDollar[1].node, ruleEngineDollar[3].node)
			if err != nil {
				return lex.setErr(err)
			}
			ruleEngineVAL.node = node
		}
	case 8:
		ruleEngineDollar = ruleEngineS[ruleEnginept-1 : ruleEnginept+1]
//line rule_engine.y:83
		{
			ruleEngineVAL.node = ruleEngineDollar[1].node
		}
	case 9:
		ruleEngineDollar = ruleEngineS[ruleEnginept-5 : ruleEnginept+1]
//line rule_engine.y:86
		{
			lex := ruleEnginelex.(*RuleEngineLex)
			node, err := lex.oper.tokenNodeThirdOper(ruleEngineDollar[1].node, ruleEngineDollar[3].node, ruleEngineDollar[5].node)
			if err != nil {
				return lex.setErr(err)
			}
			ruleEngineVAL.node = node
		}
	case 10:
		ruleEngineDollar = ruleEngineS[ruleEnginept-1 : ruleEnginept+1]
//line rule_engine.y:96
		{
			ruleEngineVAL.node = ruleEngineDollar[1].node
		}
	case 11:
		ruleEngineDollar = ruleEngineS[ruleEnginept-3 : ruleEnginept+1]
//line rule_engine.y:99
		{
			lex := ruleEnginelex.(*RuleEngineLex)
			node, err := lex.oper.tokenNodeEqual(ruleEngineDollar[1].node, ruleEngineDollar[3].node)
			if err != nil {
				return lex.setErr(err)
			}
			ruleEngineVAL.node = node
		}
	case 12:
		ruleEngineDollar = ruleEngineS[ruleEnginept-3 : ruleEnginept+1]
//line rule_engine.y:107
		{
			lex := ruleEnginelex.(*RuleEngineLex)
			node, err := lex.oper.tokenNodeNotEqual(ruleEngineDollar[1].node, ruleEngineDollar[3].node)
			if err != nil {
				return lex.setErr(err)
			}
			ruleEngineVAL.node = node
		}
	case 13:
		ruleEngineDollar = ruleEngineS[ruleEnginept-1 : ruleEnginept+1]
//line rule_engine.y:117
		{
			ruleEngineVAL.node = ruleEngineDollar[1].node
		}
	case 14:
		ruleEngineDollar = ruleEngineS[ruleEnginept-3 : ruleEnginept+1]
//line rule_engine.y:120
		{
			lex := ruleEnginelex.(*RuleEngineLex)
			node, err := lex.oper.tokenNodeLess(ruleEngineDollar[1].node, ruleEngineDollar[3].node)
			if err != nil {
				return lex.setErr(err)
			}
			ruleEngineVAL.node = node
		}
	case 15:
		ruleEngineDollar = ruleEngineS[ruleEnginept-3 : ruleEnginept+1]
//line rule_engine.y:128
		{
			lex := ruleEnginelex.(*RuleEngineLex)
			node, err := lex.oper.tokenNodeGreater(ruleEngineDollar[1].node, ruleEngineDollar[3].node)
			if err != nil {
				return lex.setErr(err)
			}
			ruleEngineVAL.node = node
		}
	case 16:
		ruleEngineDollar = ruleEngineS[ruleEnginept-3 : ruleEnginept+1]
//line rule_engine.y:136
		{
			lex := ruleEnginelex.(*RuleEngineLex)
			node, err := lex.oper.tokenNodeLessEqual(ruleEngineDollar[1].node, ruleEngineDollar[3].node)
			// __yyfmt__.Println($1, $3)
			if err != nil {
				return lex.setErr(err)
			}
			ruleEngineVAL.node = node
		}
	case 17:
		ruleEngineDollar = ruleEngineS[ruleEnginept-3 : ruleEnginept+1]
//line rule_engine.y:145
		{
			lex := ruleEnginelex.(*RuleEngineLex)
			node, err := lex.oper.tokenNodeGreaterEqual(ruleEngineDollar[1].node, ruleEngineDollar[3].node)
			if err != nil {
				return lex.setErr(err)
			}
			ruleEngineVAL.node = node
		}
	case 18:
		ruleEngineDollar = ruleEngineS[ruleEnginept-1 : ruleEnginept+1]
//line rule_engine.y:156
		{
			ruleEngineVAL.node = ruleEngineDollar[1].node
		}
	case 19:
		ruleEngineDollar = ruleEngineS[ruleEnginept-3 : ruleEnginept+1]
//line rule_engine.y:159
		{
			lex := ruleEnginelex.(*RuleEngineLex)
			node, err := lex.oper.tokenNodeAdd(ruleEngineDollar[1].node, ruleEngineDollar[3].node)
			if err != nil {
				return lex.setErr(err)
			}
			ruleEngineVAL.node = node
		}
	case 20:
		ruleEngineDollar = ruleEngineS[ruleEnginept-3 : ruleEnginept+1]
//line rule_engine.y:167
		{
			lex := ruleEnginelex.(*RuleEngineLex)
			node, err := lex.oper.tokenNodeSub(ruleEngineDollar[1].node, ruleEngineDollar[3].node)
			if err != nil {
				return lex.setErr(err)
			}
			ruleEngineVAL.node = node
		}
	case 21:
		ruleEngineDollar = ruleEngineS[ruleEnginept-1 : ruleEnginept+1]
//line rule_engine.y:177
		{
			ruleEngineVAL.node = ruleEngineDollar[1].node
		}
	case 22:
		ruleEngineDollar = ruleEngineS[ruleEnginept-3 : ruleEnginept+1]
//line rule_engine.y:180
		{
			lex := ruleEnginelex.(*RuleEngineLex)
			node, err := lex.oper.tokenNodeMul(ruleEngineDollar[1].node, ruleEngineDollar[3].node)
			if err != nil {
				return lex.setErr(err)
			}
			ruleEngineVAL.node = node
		}
	case 23:
		ruleEngineDollar = ruleEngineS[ruleEnginept-3 : ruleEnginept+1]
//line rule_engine.y:188
		{
			lex := ruleEnginelex.(*RuleEngineLex)
			node, err := lex.oper.tokenNodeDiv(ruleEngineDollar[1].node, ruleEngineDollar[3].node)
			if err != nil {
				return lex.setErr(err)
			}
			ruleEngineVAL.node = node
		}
	case 24:
		ruleEngineDollar = ruleEngineS[ruleEnginept-3 : ruleEnginept+1]
//line rule_engine.y:196
		{
			lex := ruleEnginelex.(*RuleEngineLex)
			node, err := lex.oper.tokenNodeMod(ruleEngineDollar[1].node, ruleEngineDollar[3].node)
			if err != nil {
				return lex.setErr(err)
			}
			ruleEngineVAL.node = node
		}
	case 25:
		ruleEngineDollar = ruleEngineS[ruleEnginept-1 : ruleEnginept+1]
//line rule_engine.y:206
		{
			ruleEngineVAL.node = ruleEngineDollar[1].node
		}
	case 26:
		ruleEngineDollar = ruleEngineS[ruleEnginept-2 : ruleEnginept+1]
//line rule_engine.y:209
		{
			lex := ruleEnginelex.(*RuleEngineLex)
			node, err := lex.oper.tokenNodeMinus(ruleEngineDollar[2].node)
			if err != nil {
				return lex.setErr(err)
			}
			ruleEngineVAL.node = node
		}
	case 27:
		ruleEngineDollar = ruleEngineS[ruleEnginept-2 : ruleEnginept+1]
//line rule_engine.y:217
		{
			lex := ruleEnginelex.(*RuleEngineLex)
			node, err := lex.oper.tokenNodeNot(ruleEngineDollar[2].node)
			if err != nil {
				return lex.setErr(err)
			}
			ruleEngineVAL.node = node
		}
	case 28:
		ruleEngineDollar = ruleEngineS[ruleEnginept-1 : ruleEnginept+1]
//line rule_engine.y:227
		{
			ruleEngineVAL.node = ruleEngineDollar[1].node
		}
	case 29:
		ruleEngineDollar = ruleEngineS[ruleEnginept-4 : ruleEnginept+1]
//line rule_engine.y:230
		{
			lex := ruleEnginelex.(*RuleEngineLex)
			node, err := lex.oper.tokenNodeFunc(ruleEngineDollar[1].node, ruleEngineDollar[3].node)
			if err != nil {
				return lex.setErr(err)
			}
			// __yyfmt__.Println(*node)
			ruleEngineVAL.node = node
		}
	case 30:
		ruleEngineDollar = ruleEngineS[ruleEnginept-3 : ruleEnginept+1]
//line rule_engine.y:239
		{
			lex := ruleEnginelex.(*RuleEngineLex)
			node, err := lex.oper.tokenNodeFunc(ruleEngineDollar[1].node, nil)
			if err != nil {
				return lex.setErr(err)
			}
			ruleEngineVAL.node = node
		}
	case 31:
		ruleEngineDollar = ruleEngineS[ruleEnginept-1 : ruleEnginept+1]
//line rule_engine.y:249
		{
			lex := ruleEnginelex.(*RuleEngineLex)
			node, err := lex.oper.tokenNodeArg(ruleEngineDollar[1].node)
			if err != nil {
				return lex.setErr(err)
			}
			ruleEngineVAL.node = node
		}
	case 32:
		ruleEngineDollar = ruleEngineS[ruleEnginept-3 : ruleEnginept+1]
//line rule_engine.y:257
		{
			lex := ruleEnginelex.(*RuleEngineLex)
			node, err := lex.oper.tokenNodeArgList(ruleEngineDollar[1].node, ruleEngineDollar[3].node)
			if err != nil {
				return lex.setErr(err)
			}
			ruleEngineVAL.node = node
		}
	case 33:
		ruleEngineDollar = ruleEngineS[ruleEnginept-1 : ruleEnginept+1]
//line rule_engine.y:268
		{
			// __yyfmt__.Println($1)
			ruleEngineVAL.node = ruleEngineDollar[1].node
		}
	case 34:
		ruleEngineDollar = ruleEngineS[ruleEnginept-1 : ruleEnginept+1]
//line rule_engine.y:272
		{
			ruleEngineVAL.node = ruleEngineDollar[1].node
		}
	case 35:
		ruleEngineDollar = ruleEngineS[ruleEnginept-1 : ruleEnginept+1]
//line rule_engine.y:275
		{
			ruleEngineVAL.node = ruleEngineDollar[1].node
		}
	case 36:
		ruleEngineDollar = ruleEngineS[ruleEnginept-1 : ruleEnginept+1]
//line rule_engine.y:278
		{
			ruleEngineVAL.node = ruleEngineDollar[1].node
		}
	case 37:
		ruleEngineDollar = ruleEngineS[ruleEnginept-1 : ruleEnginept+1]
//line rule_engine.y:281
		{
			ruleEnginelex.Error("syntax error")
			return ruleEnginelex.(*RuleEngineLex).getErrCode()
		}
	case 38:
		ruleEngineDollar = ruleEngineS[ruleEnginept-3 : ruleEnginept+1]
//line rule_engine.y:285
		{
			ruleEngineVAL.node = ruleEngineDollar[2].node
		}
	case 39:
		ruleEngineDollar = ruleEngineS[ruleEnginept-1 : ruleEnginept+1]
//line rule_engine.y:288
		{
			ruleEngineVAL.node = ruleEngineDollar[1].node
		}
	case 40:
		ruleEngineDollar = ruleEngineS[ruleEnginept-3 : ruleEnginept+1]
//line rule_engine.y:293
		{
			// __yyfmt__.Println($2)
			lex := ruleEnginelex.(*RuleEngineLex)
			node, err := lex.oper.tokenNodeVar(ruleEngineDollar[2].node)
			if err != nil {
				return lex.setErr(err)
			}
			ruleEngineVAL.node = node
		}
	case 41:
		ruleEngineDollar = ruleEngineS[ruleEnginept-1 : ruleEnginept+1]
//line rule_engine.y:304
		{
			ruleEngineVAL.node = ruleEngineDollar[1].node
		}
	case 42:
		ruleEngineDollar = ruleEngineS[ruleEnginept-3 : ruleEnginept+1]
//line rule_engine.y:307
		{
			lex := ruleEnginelex.(*RuleEngineLex)
			node, err := lex.oper.tokenNodeVarName(ruleEngineDollar[1].node, ruleEngineDollar[3].node)
			if err != nil {
				return lex.setErr(err)
			}
			ruleEngineVAL.node = node
		}
	case 43:
		ruleEngineDollar = ruleEngineS[ruleEnginept-3 : ruleEnginept+1]
//line rule_engine.y:315
		{
			// __yyfmt__.Println($1, $3)
			lex := ruleEnginelex.(*RuleEngineLex)
			node, err := lex.oper.tokenNodeVarName(ruleEngineDollar[1].node, ruleEngineDollar[3].node)
			if err != nil {
				return lex.setErr(err)
			}
			ruleEngineVAL.node = node
		}
	}
	goto ruleEnginestack /* stack new state and value */
}
